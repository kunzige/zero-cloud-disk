// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbShareFieldNames          = builder.RawFieldNames(&TbShare{})
	tbShareRows                = strings.Join(tbShareFieldNames, ",")
	tbShareRowsExpectAutoSet   = strings.Join(stringx.Remove(tbShareFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbShareRowsWithPlaceHolder = strings.Join(stringx.Remove(tbShareFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbShareModel interface {
		Insert(ctx context.Context, data *TbShare) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbShare, error)
		Update(ctx context.Context, data *TbShare) error
		Delete(ctx context.Context, id int64) error
		Share(ctx context.Context, data *ShareData) (sql.Result, error)
		FindByUuid(ctx context.Context, uuid string) (*SharedData, error)
		DeleteByUuid(ctx context.Context, uuid string) error
	}

	defaultTbShareModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbShare struct {
		Id            int64          `db:"id"`             // id
		UserName      string         `db:"user_name"`      // 用户名
		ShareIdentity string   `db:"share_identity"` // 文件hash
		UserEmail     string         `db:"user_email"`
		Path          sql.NullString `db:"path"`
		ShareUuid     string         `db:"share_uuid"`
		StartTime     time.Time      `db:"start_time"` // 开始时间
		Duration      int64          `db:"duration"`   // 分享链接有效时间
		Password      string   `db:"password"`   // 密码访问
	}

	ShareData struct {
		UserName      string         `db:"user_name"`      // 用户名
		ShareIdentity string         `db:"share_identity"` // 文件hash
		UserEmail     string         `db:"user_email"`
		Path          string          `db:"path"`
		ShareUuid     string         `db:"share_uuid"`
		// Duration      int64          `db:"duration"`   // 分享链接有效时间
		// Password      sql.NullString `db:"password"`   // 密码访问
	}

	SharedData struct {
		UserName      string         `db:"user_name"`      // 用户名
		Path          string          `db:"file_addr"`
		FileName 	    string         `db:"file_name"`
		FileSize       int64          `db:"file_size"`
	}

)

func newTbShareModel(conn sqlx.SqlConn) *defaultTbShareModel {
	return &defaultTbShareModel{
		conn:  conn,
		table: "`tb_share`",
	}
}

func (m *defaultTbShareModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTbShareModel) DeleteByUuid(ctx context.Context, uuid string) error {
	query := fmt.Sprintf("delete from %s where `share_uuid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, uuid)
	return err
}


func (m *defaultTbShareModel) FindOne(ctx context.Context, id int64) (*TbShare, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbShareRows, m.table)
	var resp TbShare
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultTbShareModel) FindByUuid(ctx context.Context, uuid string) (*SharedData, error) {
	query := fmt.Sprintf("select tb_file.file_name,tb_file.file_addr,tb_file.file_size,tb_share.user_name from tb_share join tb_file on tb_share.share_identity=tb_file.file_sha1 where tb_share.share_uuid= ?")
	var resp SharedData
	err := m.conn.QueryRowCtx(ctx, &resp, query, uuid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultTbShareModel) Insert(ctx context.Context, data *TbShare) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbShareRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName, data.ShareIdentity, data.UserEmail, data.Path, data.ShareUuid, data.StartTime, data.Duration, data.Password)
	return ret, err
}

func (m *defaultTbShareModel) Share(ctx context.Context, data *ShareData) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (user_name,share_identity,user_email,path,share_uuid) values (?, ?, ?, ?, ?)", m.table)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName,data.ShareIdentity,data.UserEmail,data.Path,data.ShareUuid)
	return ret, err
}


func (m *defaultTbShareModel) Update(ctx context.Context, data *TbShare) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbShareRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserName, data.ShareIdentity, data.UserEmail, data.Path, data.ShareUuid, data.StartTime, data.Duration, data.Password, data.Id)
	return err
}

func (m *defaultTbShareModel) tableName() string {
	return m.table
}
