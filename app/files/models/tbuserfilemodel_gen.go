// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	_"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbUserFileFieldNames          = builder.RawFieldNames(&TbUserFile{})
	tbUserFileRows                = strings.Join(tbUserFileFieldNames, ",")
	tbUserFileRowsExpectAutoSet   = strings.Join(stringx.Remove(tbUserFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbUserFileRowsWithPlaceHolder = strings.Join(stringx.Remove(tbUserFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbUserFileModel interface {
		Insert(ctx context.Context, data *TbUserFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbUserFile, error)
		Update(ctx context.Context, data *TbUserFile) error
		Delete(ctx context.Context, id int64) error
		FindListByEmail(ctx context.Context,email string) ([]*TbUserFile, error)
		DeleteByHash(ctx context.Context, hash string) error
	}

	defaultTbUserFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbUserFile struct {
		Id         int64     `db:"id"`
		UserName   string    `db:"user_name"`   // 用户名
		UserEmail  string    `db:"user_email"`  // 用户邮箱
		FileName   string    `db:"file_name"`   // 文件名
		FileSize   int64     `db:"file_size"`   // 文件大小
		FileSha1   string    `db:"file_sha1"`   // 文件hash
		UploadAt   time.Time `db:"upload_at"`   // 上传时间
		LastUpdate time.Time `db:"last_update"` // 更新时间
		Status     int64     `db:"status"`      // 0正常1删除2禁用
	}
)

func newTbUserFileModel(conn sqlx.SqlConn) *defaultTbUserFileModel {
	return &defaultTbUserFileModel{
		conn:  conn,
		table: "`tb_user_file`",
	}
}

func (m *defaultTbUserFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTbUserFileModel) DeleteByHash(ctx context.Context, hash string) error {
	query := fmt.Sprintf("delete from %s where `file_sha1` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, hash)
	return err
}


func (m *defaultTbUserFileModel) FindOne(ctx context.Context, id int64) (*TbUserFile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbUserFileRows, m.table)
	var resp TbUserFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserFileModel) FindListByEmail(ctx context.Context,email string) ([]*TbUserFile, error) {
	query := fmt.Sprintf("select %s from %s where `user_email` = ?", tbUserFileRows, m.table)
	var resp []*TbUserFile
	err := m.conn.QueryRowsCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserFileModel) Insert(ctx context.Context, data *TbUserFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbUserFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName, data.UserEmail, data.FileName, data.FileSize, data.FileSha1, data.UploadAt, data.LastUpdate, data.Status)
	return ret, err
}

func (m *defaultTbUserFileModel) Update(ctx context.Context, data *TbUserFile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbUserFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserName, data.UserEmail, data.FileName, data.FileSize, data.FileSha1, data.UploadAt, data.LastUpdate, data.Status, data.Id)
	return err
}

func (m *defaultTbUserFileModel) tableName() string {
	return m.table
}


func GetUserFileName()string{
	return "tb_user_file"
}