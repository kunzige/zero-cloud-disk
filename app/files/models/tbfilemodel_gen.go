// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbFileFieldNames          = builder.RawFieldNames(&TbFile{})
	tbFileRows                = strings.Join(tbFileFieldNames, ",")
	tbFileRowsExpectAutoSet   = strings.Join(stringx.Remove(tbFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbFileRowsWithPlaceHolder = strings.Join(stringx.Remove(tbFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbFileModel interface {
		Insert(ctx context.Context, data *TbFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbFile, error)
		FindOneByFileSha1(ctx context.Context, fileSha1 string) (*TbFile, error)
		Update(ctx context.Context, data *TbFile) error
		Delete(ctx context.Context, id int64) error
		UpdateBySha1(ctx context.Context, file_hash string,new_name string) error 
	}

	defaultTbFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbFile struct {
		Id       int64          `db:"id"`
		FileSha1 string         `db:"file_sha1"` // hash
		FileName string         `db:"file_name"` // 文件名
		FileSize int64          `db:"file_size"` // 文件大小
		FileAddr string         `db:"file_addr"` // 文件目录
		CreateAt string         `db:"create_at"` // 创建时间
		UpdateAt string         `db:"update_at"` // 更新时间
		DeleteAt sql.NullString `db:"delete_at"` // 删除时间
		Status   int64          `db:"status"`    // 状态(是否删除)
		Ext      sql.NullString `db:"ext"`       // 扩展
	}
)

func newTbFileModel(conn sqlx.SqlConn) *defaultTbFileModel {
	return &defaultTbFileModel{
		conn:  conn,
		table: "`tb_file`",
	}
}

func (m *defaultTbFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTbFileModel) FindOne(ctx context.Context, id int64) (*TbFile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbFileRows, m.table)
	var resp TbFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbFileModel) FindOneByFileSha1(ctx context.Context, fileSha1 string) (*TbFile, error) {
	var resp TbFile
	query := fmt.Sprintf("select %s from %s where `file_sha1` = ? limit 1", tbFileRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, fileSha1)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbFileModel) Insert(ctx context.Context, data *TbFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, tbFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FileSha1, data.FileName, data.FileSize, data.FileAddr, data.DeleteAt, data.Status, data.Ext)
	return ret, err
}

func (m *defaultTbFileModel) Update(ctx context.Context, newData *TbFile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.FileSha1, newData.FileName, newData.FileSize, newData.FileAddr, newData.DeleteAt, newData.Status, newData.Ext, newData.Id)
	return err
}

func (m *defaultTbFileModel) UpdateBySha1(ctx context.Context, file_hash string,new_name string) error {
	query := fmt.Sprintf("update %s set %s = ?  where `file_sha1` = ?", m.table, "file_name")
	_, err := m.conn.ExecCtx(ctx, query,new_name,file_hash)
	return err
}


func (m *defaultTbFileModel) tableName() string {
	return m.table
}
