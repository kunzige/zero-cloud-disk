// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Filecenter_GetFileInfo_FullMethodName          = "/pb.filecenter/GetFileInfo"
	Filecenter_FileDownload_FullMethodName         = "/pb.filecenter/FileDownload"
	Filecenter_FileModify_FullMethodName           = "/pb.filecenter/FileModify"
	Filecenter_FileMove_FullMethodName             = "/pb.filecenter/FileMove"
	Filecenter_FileDelete_FullMethodName           = "/pb.filecenter/FileDelete"
	Filecenter_FileDeleteForever_FullMethodName    = "/pb.filecenter/FileDeleteForever"
	Filecenter_FileDeleteAllForever_FullMethodName = "/pb.filecenter/FileDeleteAllForever"
	Filecenter_FileListByPath_FullMethodName       = "/pb.filecenter/FileListByPath"
	Filecenter_CreateFolder_FullMethodName         = "/pb.filecenter/CreateFolder"
	Filecenter_FileRecycleList_FullMethodName      = "/pb.filecenter/FileRecycleList"
)

// FilecenterClient is the client API for Filecenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilecenterClient interface {
	GetFileInfo(ctx context.Context, in *FileInfoReq, opts ...grpc.CallOption) (*FileInfoRes, error)
	FileDownload(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*FileDownloadRes, error)
	FileModify(ctx context.Context, in *FileModifyReq, opts ...grpc.CallOption) (*FileModifyRes, error)
	FileMove(ctx context.Context, in *FileMoveReq, opts ...grpc.CallOption) (*FileMoveRes, error)
	FileDelete(ctx context.Context, in *FileDeleteReq, opts ...grpc.CallOption) (*FileDeleteRes, error)
	FileDeleteForever(ctx context.Context, in *DeleteForeverReq, opts ...grpc.CallOption) (*DeleteForeverRes, error)
	FileDeleteAllForever(ctx context.Context, in *DeleteAllForeverReq, opts ...grpc.CallOption) (*DeleteAllForeverRes, error)
	FileListByPath(ctx context.Context, in *FileListByPathReq, opts ...grpc.CallOption) (*FileListByPathRes, error)
	CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*CreateFolderRes, error)
	FileRecycleList(ctx context.Context, in *FileRecycleListReq, opts ...grpc.CallOption) (*FileRecycleListRes, error)
}

type filecenterClient struct {
	cc grpc.ClientConnInterface
}

func NewFilecenterClient(cc grpc.ClientConnInterface) FilecenterClient {
	return &filecenterClient{cc}
}

func (c *filecenterClient) GetFileInfo(ctx context.Context, in *FileInfoReq, opts ...grpc.CallOption) (*FileInfoRes, error) {
	out := new(FileInfoRes)
	err := c.cc.Invoke(ctx, Filecenter_GetFileInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileDownload(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*FileDownloadRes, error) {
	out := new(FileDownloadRes)
	err := c.cc.Invoke(ctx, Filecenter_FileDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileModify(ctx context.Context, in *FileModifyReq, opts ...grpc.CallOption) (*FileModifyRes, error) {
	out := new(FileModifyRes)
	err := c.cc.Invoke(ctx, Filecenter_FileModify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileMove(ctx context.Context, in *FileMoveReq, opts ...grpc.CallOption) (*FileMoveRes, error) {
	out := new(FileMoveRes)
	err := c.cc.Invoke(ctx, Filecenter_FileMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileDelete(ctx context.Context, in *FileDeleteReq, opts ...grpc.CallOption) (*FileDeleteRes, error) {
	out := new(FileDeleteRes)
	err := c.cc.Invoke(ctx, Filecenter_FileDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileDeleteForever(ctx context.Context, in *DeleteForeverReq, opts ...grpc.CallOption) (*DeleteForeverRes, error) {
	out := new(DeleteForeverRes)
	err := c.cc.Invoke(ctx, Filecenter_FileDeleteForever_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileDeleteAllForever(ctx context.Context, in *DeleteAllForeverReq, opts ...grpc.CallOption) (*DeleteAllForeverRes, error) {
	out := new(DeleteAllForeverRes)
	err := c.cc.Invoke(ctx, Filecenter_FileDeleteAllForever_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileListByPath(ctx context.Context, in *FileListByPathReq, opts ...grpc.CallOption) (*FileListByPathRes, error) {
	out := new(FileListByPathRes)
	err := c.cc.Invoke(ctx, Filecenter_FileListByPath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*CreateFolderRes, error) {
	out := new(CreateFolderRes)
	err := c.cc.Invoke(ctx, Filecenter_CreateFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecenterClient) FileRecycleList(ctx context.Context, in *FileRecycleListReq, opts ...grpc.CallOption) (*FileRecycleListRes, error) {
	out := new(FileRecycleListRes)
	err := c.cc.Invoke(ctx, Filecenter_FileRecycleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilecenterServer is the server API for Filecenter service.
// All implementations must embed UnimplementedFilecenterServer
// for forward compatibility
type FilecenterServer interface {
	GetFileInfo(context.Context, *FileInfoReq) (*FileInfoRes, error)
	FileDownload(context.Context, *FileDownloadReq) (*FileDownloadRes, error)
	FileModify(context.Context, *FileModifyReq) (*FileModifyRes, error)
	FileMove(context.Context, *FileMoveReq) (*FileMoveRes, error)
	FileDelete(context.Context, *FileDeleteReq) (*FileDeleteRes, error)
	FileDeleteForever(context.Context, *DeleteForeverReq) (*DeleteForeverRes, error)
	FileDeleteAllForever(context.Context, *DeleteAllForeverReq) (*DeleteAllForeverRes, error)
	FileListByPath(context.Context, *FileListByPathReq) (*FileListByPathRes, error)
	CreateFolder(context.Context, *CreateFolderReq) (*CreateFolderRes, error)
	FileRecycleList(context.Context, *FileRecycleListReq) (*FileRecycleListRes, error)
	mustEmbedUnimplementedFilecenterServer()
}

// UnimplementedFilecenterServer must be embedded to have forward compatible implementations.
type UnimplementedFilecenterServer struct {
}

func (UnimplementedFilecenterServer) GetFileInfo(context.Context, *FileInfoReq) (*FileInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFilecenterServer) FileDownload(context.Context, *FileDownloadReq) (*FileDownloadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedFilecenterServer) FileModify(context.Context, *FileModifyReq) (*FileModifyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileModify not implemented")
}
func (UnimplementedFilecenterServer) FileMove(context.Context, *FileMoveReq) (*FileMoveRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMove not implemented")
}
func (UnimplementedFilecenterServer) FileDelete(context.Context, *FileDeleteReq) (*FileDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDelete not implemented")
}
func (UnimplementedFilecenterServer) FileDeleteForever(context.Context, *DeleteForeverReq) (*DeleteForeverRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDeleteForever not implemented")
}
func (UnimplementedFilecenterServer) FileDeleteAllForever(context.Context, *DeleteAllForeverReq) (*DeleteAllForeverRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDeleteAllForever not implemented")
}
func (UnimplementedFilecenterServer) FileListByPath(context.Context, *FileListByPathReq) (*FileListByPathRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileListByPath not implemented")
}
func (UnimplementedFilecenterServer) CreateFolder(context.Context, *CreateFolderReq) (*CreateFolderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFilecenterServer) FileRecycleList(context.Context, *FileRecycleListReq) (*FileRecycleListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRecycleList not implemented")
}
func (UnimplementedFilecenterServer) mustEmbedUnimplementedFilecenterServer() {}

// UnsafeFilecenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilecenterServer will
// result in compilation errors.
type UnsafeFilecenterServer interface {
	mustEmbedUnimplementedFilecenterServer()
}

func RegisterFilecenterServer(s grpc.ServiceRegistrar, srv FilecenterServer) {
	s.RegisterService(&Filecenter_ServiceDesc, srv)
}

func _Filecenter_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).GetFileInfo(ctx, req.(*FileInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileDownload(ctx, req.(*FileDownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileModify(ctx, req.(*FileModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileMove(ctx, req.(*FileMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileDelete(ctx, req.(*FileDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileDeleteForever_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForeverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileDeleteForever(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileDeleteForever_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileDeleteForever(ctx, req.(*DeleteForeverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileDeleteAllForever_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllForeverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileDeleteAllForever(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileDeleteAllForever_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileDeleteAllForever(ctx, req.(*DeleteAllForeverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileListByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListByPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileListByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileListByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileListByPath(ctx, req.(*FileListByPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).CreateFolder(ctx, req.(*CreateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filecenter_FileRecycleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRecycleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecenterServer).FileRecycleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filecenter_FileRecycleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecenterServer).FileRecycleList(ctx, req.(*FileRecycleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Filecenter_ServiceDesc is the grpc.ServiceDesc for Filecenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filecenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.filecenter",
	HandlerType: (*FilecenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileInfo",
			Handler:    _Filecenter_GetFileInfo_Handler,
		},
		{
			MethodName: "FileDownload",
			Handler:    _Filecenter_FileDownload_Handler,
		},
		{
			MethodName: "FileModify",
			Handler:    _Filecenter_FileModify_Handler,
		},
		{
			MethodName: "FileMove",
			Handler:    _Filecenter_FileMove_Handler,
		},
		{
			MethodName: "FileDelete",
			Handler:    _Filecenter_FileDelete_Handler,
		},
		{
			MethodName: "FileDeleteForever",
			Handler:    _Filecenter_FileDeleteForever_Handler,
		},
		{
			MethodName: "FileDeleteAllForever",
			Handler:    _Filecenter_FileDeleteAllForever_Handler,
		},
		{
			MethodName: "FileListByPath",
			Handler:    _Filecenter_FileListByPath_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _Filecenter_CreateFolder_Handler,
		},
		{
			MethodName: "FileRecycleList",
			Handler:    _Filecenter_FileRecycleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
